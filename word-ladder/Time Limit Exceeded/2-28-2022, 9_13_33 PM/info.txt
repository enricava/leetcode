{"id":650776430,"lang":"python","lang_name":"Python","time":"1 year, 6 months","timestamp":1646079213,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/650776430/","is_pending":"Not Pending","title":"Word Ladder","memory":"N/A","code":"class Solution(object):\n    \n    def isAdj(self, word1, word2):\n        ok = True\n        dif = False\n        for k in range(len(word1)):\n            if word1[k] != word2[k]:\n                if dif:\n                    ok = False\n                    break\n                if not dif:\n                    dif = True\n                \n        return ok and dif\n        \n    \n    def adj(self, word, wordList, visited):\n        adj = []\n        for i,x in enumerate(wordList):\n            if visited[i] == 0 and self.isAdj(word, x):\n                adj.append(i)\n        return adj\n            \n    \n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        if not endWord in wordList:\n            return 0\n        if self.isAdj(beginWord, endWord):\n            return 2\n        visited = [0 for _ in wordList]\n        queue = self.adj(beginWord, wordList, visited)\n        level = 2\n        while queue:\n            level += 1\n            k = len(queue)\n            for _ in range(k):\n                temp = queue.pop(0)\n                visited[temp] == True\n                if self.isAdj(wordList[temp], endWord):\n                    return level\n                else:\n                    queue += self.adj(wordList[temp], wordList, visited)\n            \n        \n        return 0\n","compare_result":"11111111111111111000000000000000000000000000000000","title_slug":"word-ladder","has_notes":false,"flag_type":1}