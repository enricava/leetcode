{"id":650073697,"lang":"python","lang_name":"Python","time":"1 year, 6 months","timestamp":1645988110,"status":10,"status_display":"Accepted","runtime":"625 ms","url":"/submissions/detail/650073697/","is_pending":"Not Pending","title":"Number of Islands","memory":"30.5 MB","code":"class Solution(object):\n    kx = [0, 0, 1, -1]\n    ky = [1, -1, 0, 0]\n    \n    \n    def ok(self, i,j, m, n):\n        return 0 <= i and i < m and 0 <= j and j < n\n    \n    def adj(self, i,j, m, n):\n        positions = []\n        for k in range(4):\n            if self.ok(i + self.kx[k], j + self.ky[k], m, n):\n                positions.append([i + self.kx[k], j + self.ky[k]])\n        return positions\n    \n    def bfs(self, i, j, grid, visited):\n        queue = [[i,j]]\n        while queue:\n            top = queue.pop()\n            x, y = top[0], top[1]\n            if not visited[x][y]:\n                visited[x][y] = 1\n                if grid[x][y] == '1':\n                    queue += self.adj(x,y,len(grid), len(grid[0]))\n    \n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        # O(m * n)\n        \n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        visited = [[0 for _ in range(n)] for _ in range(m)]\n        \n        islands = 0\n\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j] and grid[i][j] == '1':\n                    islands += 1\n\n                    self.bfs(i,j, grid, visited)\n        return islands\n                    \n        # 1 1 0 0 0\n        # 1 1 0 0 0 \n        # 0 0 1 0 0\n        # 0 0 0 1 1\n                    \n                    \n                    \n                    ","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}