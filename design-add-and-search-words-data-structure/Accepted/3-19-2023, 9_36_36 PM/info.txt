{"id":918335733,"lang":"python3","lang_name":"Python3","time":"5 months, 3 weeks","timestamp":1679258196,"status":10,"status_display":"Accepted","runtime":"15366 ms","url":"/submissions/detail/918335733/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"84.1 MB","code":"class WordDictionary:\n\n    def __init__(self):\n        self.children = [None]*26\n        self.isCompleteWord = False\n        \n\n    def addWord(self, word: str) -> None:\n        curr = self\n        for c in word:\n            if curr.children[ord(c) - ord('a')] == None:\n                curr.children[ord(c) - ord('a')] = WordDictionary()\n            curr = curr.children[ord(c) - ord('a')]\n        \n        curr.isCompleteWord = True\n        \n\n    def search(self, word: str) -> bool:\n        curr = self\n        for i in range(len(word)):\n            c = word[i]\n            if c == '.':\n                for ch in curr.children:\n                    if ch != None and ch.search(word[i+1:]): return True\n                return False\n            \n            if curr.children[ord(c) - ord('a')] == None: return False\n            curr = curr.children[ord(c) - ord('a')]\n        \n        return curr != None and curr.isCompleteWord\n\n        \n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}