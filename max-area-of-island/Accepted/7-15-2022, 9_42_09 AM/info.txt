{"id":747600443,"lang":"python3","lang_name":"Python3","time":"1 year, 1 month","timestamp":1657870929,"status":10,"status_display":"Accepted","runtime":"218 ms","url":"/submissions/detail/747600443/","is_pending":"Not Pending","title":"Max Area of Island","memory":"17.7 MB","code":"class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        ki = [1,-1,0,0]\n        kj = [0,0,1,-1]\n        m = len(grid)\n        n = len(grid[0])\n        \n        visited = [[False for c in grid[0]] for r in grid]\n        \n        def ok(i,j):\n            return 0<=i and i <m and 0 <=j and j < n\n        \n        def dfs(i,j):\n            tam = 1\n            visited[i][j] = True\n            for k in range(4):\n                if ok(i+ki[k],j+kj[k]) and not visited[i+ki[k]][j+kj[k]] and grid[i+ki[k]][j+kj[k]] == 1:\n                    tam += dfs(i+ki[k],j+kj[k])\n                    \n            return tam\n        \n        best = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if not visited[i][j] and grid[i][j] == 1:\n                    best = max(dfs(i,j),best)\n        return best","compare_resulttitle_slug":"max-area-of-island","has_notes":false,"flag_type":1}