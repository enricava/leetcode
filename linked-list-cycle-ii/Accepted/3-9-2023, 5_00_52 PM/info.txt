{"id":912165317,"lang":"python3","lang_name":"Python3","time":"6Â months","timestamp":1678377652,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/912165317/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"17.3 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        slow = fast = head\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n            if slow == fast:\n                break\n        else:\n            return None  # if not (fast and fast.next): return None\n        while head != slow:\n            head, slow = head.next, slow.next\n        return head","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}