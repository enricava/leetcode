{"id":802115765,"lang":"python3","lang_name":"Python3","time":"11 months, 4 weeks","timestamp":1663429383,"status":10,"status_display":"Accepted","runtime":"306 ms","url":"/submissions/detail/802115765/","is_pending":"Not Pending","title":"Number of Provinces","memory":"14.8 MB","code":"class Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        \n        count = 0\n        n = len(isConnected)\n        visited = [0]*n\n        \n        def dfs(i):\n            visited[i] = 1\n            for j in range(n):\n                if not visited[j] and isConnected[i][j]:\n                    dfs(j)\n        \n        for i in range(n):\n            if not visited[i]:\n                dfs(i)\n                count += 1\n                \n        \n        return count","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}