{"id":757064731,"lang":"python3","lang_name":"Python3","time":"1 year, 1 month","timestamp":1658824243,"status":10,"status_display":"Accepted","runtime":"135 ms","url":"/submissions/detail/757064731/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"26.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root:\n            return root\n        \n        if root.val == p.val or root.val == q.val:\n            return root\n        \n        left = self.lowestCommonAncestor(root.left,p,q)\n        right = self.lowestCommonAncestor(root.right,p,q)\n        \n        if not left:\n            return right\n        if not right:\n            return left\n        \n        return root","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}