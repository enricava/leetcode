{"id":757125600,"lang":"python3","lang_name":"Python3","time":"1 year, 1 month","timestamp":1658830683,"status":10,"status_display":"Accepted","runtime":"5156 ms","url":"/submissions/detail/757125600/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"43.3 MB","code":"class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        arr=[] # array with indexes\n        res=[0]*len(nums)\n        \n        # add (num, index) tuples\n        for i,num in enumerate(nums):\n            arr.append((num, i))\n    \n        def merge(left, right):\n            l=0\n            r=0\n            out=[]\n            numElemsRightArrayLessThanLeftArray=0\n            while l < len(left) and r < len(right):\n                if left[l][0] > right[r][0]:\n                    out.append(right[r])\n                    r += 1\n                    numElemsRightArrayLessThanLeftArray += 1                 \n                else:\n                    out.append(left[l])\n                    res[left[l][1]] += numElemsRightArrayLessThanLeftArray\n                    l += 1\n            if l < (len(left)):\n                for i in range(l, len(left)):\n                    out.append(left[i])\n                    res[left[i][1]] += numElemsRightArrayLessThanLeftArray\n            if r < (len(right)):\n                for i in range(r,len(right)):\n                    out.append(right[i])\n            return out\n\n        def merge_sort(arr):\n            if len(arr)==1:\n                return arr\n            midIndex=len(arr)//2\n            left_side=merge_sort(arr[:midIndex])\n            right_side=merge_sort(arr[midIndex:])\n            return merge(left_side, right_side)\n        _=merge_sort(arr)\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-smaller-numbers-after-self","has_notes":false,"flag_type":1}