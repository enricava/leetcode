{"id":799467395,"lang":"python3","lang_name":"Python3","time":"12Â months","timestamp":1663142728,"status":10,"status_display":"Accepted","runtime":"1408 ms","url":"/submissions/detail/799467395/","is_pending":"Not Pending","title":"Pseudo-Palindromic Paths in a Binary Tree","memory":"86 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:\n        self.count = 0\n        self.curr = {}\n        \n        def put(self, k):\n            if k not in self.curr:\n                self.curr[k] = 1\n            else:\n                self.curr[k] += 1\n                \n        def pop(self, k):\n            if self.curr[k] == 1:\n                del self.curr[k]\n            else:\n                self.curr[k] -= 1\n\n        \n        def pp(self, root):\n            put(self, root.val)\n            if not root.left and not root.right:\n                odds = 0\n                for k in self.curr:\n                    if self.curr[k] % 2 != 0:\n                        odds +=1\n                        if odds == 2:\n                            break\n                if odds <= 1:\n                    self.count += 1\n                    \n            if root.left:\n                pp(self,root.left)\n            if root.right:\n                pp(self,root.right)\n                \n            pop(self,root.val)\n        \n        pp(self, root)\n        return self.count","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"pseudo-palindromic-paths-in-a-binary-tree","has_notes":false,"flag_type":1}